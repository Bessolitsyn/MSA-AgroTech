@startuml агро_V1

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

' !include C4_Context.puml
' !include C4_Container.puml
' !include C4_Component.puml
title "Container Diagram"

Person(сотрудник, "дежурный сотрудник")


System_Boundary(платформа, "Агротех  - платформа управления животноводческим комплексом") {

    System_Boundary(databus, "система передачи и обработки данных", "сбор данных от технических систем, структурирование, хранение ") {        
        Container(broker, "Брокер сообщений","Apache Kafka", "Шина данных")        
    }
    System_Boundary(животноводство,"система жизнеобеспечения животных", "Мниторинг состояния технических средств(кормушки, поилки и др)") {
        Container(sensors, "Датчики", "", "")
        Container(gateway, "Шлюз", "", "обработки и отправки сообщений")
        Container(devices, "Автоматизированные устройства ", "", "кормления, подачи воды и т. д.")        
        Rel(sensors, gateway, "")
        Rel(devices, gateway, "")
        Rel(gateway, broker, "", "Kafka Protocol")
    }
    System_Boundary(видео,"система видеонаблюдения за животными", "") {
        Container(camera, "Камеры")
        Container(streaming, "Шлюз", "", "обработки и передачи видео потока")
        Container(recivers, " Видеорегистраторы")        
        Rel(camera, streaming, "")
        Rel(recivers, streaming, "")
        
    }
    System_Boundary(цуп, "система мониторинга хозяйства", "управление,  мониторинг, анализ, оповещение, отчетность") {
        Container_Boundary(api, "API"){
            Component(apiApiController,"ApiController")
            Component(apiAuth_Service,"Auth_Service")
            Component(apiGatewayService, "GatewayService")
            Rel(apiApiController, apiGatewayService, "")
            Rel(apiApiController, apiAuth_Service, "")

        }
        Container(app, "приложения")
        Container_Boundary(bi, "аналитический сервис", "", "вычисление показателей, трендов и др."){
            Component(biRestController, "RestController")
            Component(biBrokerClient, "BrokerClient")
            Component(biInteractor, "Interactor")
            Component(biReportsProvider, "ReportsProvider")
            Component(biReportsEntities, "ReportsEntities")
            Component(biDBController, "DBController")
            Rel(biRestController, biInteractor,"")
            Rel(biInteractor, biReportsProvider,"")
            Rel(biReportsProvider, biBrokerClient,"")
            Rel(biReportsProvider, biDBController,"")
            Rel(biReportsProvider, biReportsEntities,"")
        }
        Container_Boundary(supervisor, "сервис мониторинга", "", "мониторинг состояния, оповещения"){
            Component(supervisorWebSocketController, "WebSocketController")
            Component(supervisorBrokerClient, "BrokerClient")
            Component(supervisorInteractor, "Interactor")
            Component(supervisorNotifier, "Notifier")
            Component(supervisorIndicatorsProvider, "IndicatorsProvider")
            Component(supervisorIndicatorsEntities, "IndicatorsEntities")
            Component(supervisorDBController, "DBController")
            Rel(supervisorWebSocketController, supervisorInteractor,"")
            Rel(supervisorInteractor, supervisorIndicatorsProvider,"")
            Rel(supervisorInteractor, supervisorNotifier,"")
            Rel(supervisorIndicatorsProvider, supervisorBrokerClient,"")
            Rel(supervisorIndicatorsProvider, supervisorDBController,"")
            Rel(supervisorIndicatorsProvider, supervisorIndicatorsEntities,"")
        }
        
        ContainerDb(storage, "Хранилище","PostgeSQL", "")
        Rel(app, apiApiController, "")
        Rel(broker, biBrokerClient, "метрические данные", "Kafka Protocol")
        Rel(broker, supervisorBrokerClient, "метрические данные", "Kafka Protocol")
        Rel(biDBController, storage, "")
        Rel(supervisorDBController, storage, "")
        Rel(apiGatewayService, biRestController, "","REST")
        Rel(apiGatewayService, supervisorWebSocketController, "","WebSocket")

        
    }
    Container_Boundary(agent, "агент", "", "сервис синхронизации с ЦОД Агротех"){
        Component(agentSyncController, "SyncController")
        Component(agentDataProvider, "DataProvider")
        Rel(agentSyncController,agentDataProvider,"")
    }    
    Rel(agentDataProvider, storage, "")    

    System_Boundary(ai_,"",""){
        Container(ai, "ИИ-система мониторинга животных", "анализ видео") 
    }    

}

Container_Boundary(collector, "сервис сбора данных от хозяйст"){
        Component(collectorApi, "RESTController")
        Component(collectorInput, "DataIntegrator")
        Rel_L(agentSyncController, collectorApi, "REST")
}

Rel(streaming, ai, "Потоковое видео","WebRTC")        
Rel(ai, broker, "", "Kafka Protocol")  
Rel(сотрудник, app, "использует")   
   



@enduml